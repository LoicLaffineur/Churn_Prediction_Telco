# -*- coding: utf-8 -*-
"""Telco_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IM6jOsChCdNQkvmqC24q2VrOf2BhlLin
"""
import streamlit as st
import pandas as pd
import numpy as np
import joblib
import shap
import matplotlib.pyplot as plt
import streamlit.components.v1 as components

# Load model and preprocessor
model = joblib.load("Streamlit_app/reg_log_model_churn.pkl")
scaler = joblib.load("Streamlit_app/scaler.pkl")
cols = joblib.load("Streamlit_app/features.pkl")  # List of features used in the model
X_test = joblib.load('Streamlit_app/X_test.pkl')

# App title
st.title("📉 Telco Customer Churn Prediction")

# Sidebar form
st.sidebar.header("🧾 Informations client")
gender = st.sidebar.selectbox("Gender", ["Male", "Female"])
SeniorCitizen = st.sidebar.selectbox("Senior Citizen", [0, 1])
tenure = st.sidebar.slider("Tenure (mois)", 0, 72, 12)
MonthlyCharges = st.sidebar.number_input("Monthly Charges", 0.0, 200.0, 70.0)
TotalCharges = st.sidebar.number_input("Total Charges", 0.0, 10000.0, 1500.0)
Contract = st.sidebar.selectbox("Contract", ["Month-to-month", "One year", "Two year"])
InternetService = st.sidebar.selectbox("Internet Service", ["DSL", "Fiber optic", "No"])
PaperlessBilling = st.sidebar.selectbox("Paperless Billing", ["Yes", "No"])

# Convert to DataFrame
input_dict = {
    'gender': gender,
    'SeniorCitizen': SeniorCitizen,
    'tenure': tenure,
    'MonthlyCharges': MonthlyCharges,
    'TotalCharges': TotalCharges,
    'Contract': Contract,
    'InternetService': InternetService,
    'PaperlessBilling': PaperlessBilling
}
input_df = pd.DataFrame([input_dict])

num=['tenure', 'MonthlyCharges', 'TotalCharges']

# Preprocessing
input_encoded = pd.get_dummies(input_df)
input_encoded = input_encoded.reindex(columns=cols, fill_value=0)
input_scaled = input_encoded.copy()
input_scaled[num] = scaler.transform(input_encoded[num])

# Predict
proba = model.predict_proba(input_scaled)[0][1]
st.subheader("🎯 Résultat de la prédiction")
st.metric(label="Probabilité de churn", value=f"{proba*100:.2f} %")
if proba > 0.29 : # Threshold found in the other notebook
    st.warning("⚠️ Ce client est à **risque élevé** de churn.")
else:
    st.success("✅ Ce client est à **faible risque** de churn.")

# SHAP values : 
explainer = shap.explainers.Linear(model,X_test)
shap_values = explainer(input_scaled)

# Helper function to plot : 
def st_shap(plot, height=300):
    shap_html = f"<head>{shap.getjs()}</head><body>{plot.html()}</body>"
    components.html(shap_html, height=height)

st.title("💡 Explication SHAP pour un nouvel individu")
st.subheader("🚨 Impact des features sur la prédiction de churn :")

st_shap(shap.plots.force(shap_values[0]))
